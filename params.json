{"name":"Fog","tagline":"Fog brings the cloud down to earth and harnesses it with F#.","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"Fog\r\n=======\r\n\r\n**Fog** brings the cloud down to earth and wraps it in something more easily used by F#. It provides a more functional approach to creating Windows Azure apps with F#.\r\n\r\nBuilding Azure apps with Fog that need to interact with Azure Table Storage, Blob Storage, Queue Storage, Caching, and/or the Service Bus is very easy \r\nwith the help of a few configuration settings that have specific names. The examples that follow use this approach. Fog also provides more fine-grained\r\ninteraction if that is desired. See the integration tests for examples.\r\n\r\nHow To Get It\r\n=======\r\n\r\nFog is available on NuGet Gallery as id Fog.\r\n\r\nGetting Started\r\n=======\r\n\r\n**Blob Storage**\r\n\r\nWith Fog all you have to do to interact with Azure blob storage is to add the connection string information in the config with a name of \r\n\"BlobStorageConnectionString\". Once that is done, you can use syntax like the following:\r\n\r\n\tUploadBlob \"testcontainer\" \"testblob\" \"This is a test\" |> ignore\r\n\tDeleteBlob \"testcontainer\" \"testblob\"\r\n\r\nor\r\n\r\n\tUploadBlob \"testcontainer\" \"testblob\" testBytes |> ignore\r\n\tDownloadBlob<byte[]> \"testcontainer\" \"testblob\"\r\n\r\n**Table Storage**\r\n\r\nThe simplest way to interact with Azure table storage is to add the connection string information in the config with a name of \r\n\"TableStorageConnectionString\". Once that is done, you can use syntax like the following:\r\n\r\n    [<DataServiceKey(\"PartitionKey\", \"RowKey\")>]\r\n\ttype TestClass() = \r\n\t\tlet mutable partitionKey = \"\"\r\n\t\tlet mutable rowKey = \"\"\r\n\t\tlet mutable name = \"\"\r\n\t\tmember x.PartitionKey with get() = partitionKey and set v = partitionKey <- v\r\n\t\tmember x.RowKey with get() = rowKey and set v = rowKey <- v\r\n\t\tmember x.Name with get() = name and set v = name <- v\r\n\r\n    let originalClass = TestClass( PartitionKey = \"TestPart\", RowKey = Guid.NewGuid().ToString(), Name = \"test\" )\r\n    \r\n\tCreateEntity \"testtable\" originalClass |> ignore\r\n    \r\n\tlet newClass = originalClass\r\n    newClass.Name <- \"test2\"\r\n    UpdateEntity \"testtable\" newClass |> ignore\r\n    \r\n\tDeleteEntity \"testtable\" newClass\r\n\r\n**Queue Storage**\r\n\r\nFor queue storage, add the connection string configuration value with setting name \"QueueStorageConnectionString\".\r\n\r\n    AddMessage \"testqueue\" \"This is a test message\" |> ignore\r\n    let result = GetMessages \"testqueue\" 20 5\r\n    for m in result do\r\n        DeleteMessage \"testqueue\" m\r\n\r\n**Service Bus**\r\n\r\nThere are a few service bus related config entries. Here's the list of expected names: ServiceBusIssuer, ServiceBusKey, ServiceBusScheme, ServiceBusNamespace, ServiceBusServicePath\r\n\r\nTo send a message do this:\r\n\r\n\ttype TestRecord = { Name : string }\r\n\r\n\tlet testRecord = { Name = \"test\" } \r\n\r\n    SendMessage \"testQueue\" testRecord\r\n\r\nTo receive a message, pass the queue name, a function to handle successful message retrieval, and another function to handle errors.\r\n\r\n    HandleMessages \"testQueue\"\r\n        <| fun m -> printfn \"%s\" m.GetBody<TestRecord>().Name\r\n        <| fun ex m -> raise ex        \r\n\r\nTo use topics in a pub/sub type of scenario, use something like the following to subscribe:\r\n\r\n    Subscribe \"topictest2\" \"AllTopics4\"\r\n        <| fun m -> printfn \"%s\" m.GetBody<TestRecord>().Name\r\n        <| fun ex m -> raise ex        \r\n\r\nMessage publishing can be accomplished like this:\r\n             \r\n    Publish \"topictest2\" testRecord\r\n\r\nA few other handy functions include Unsubscribe and DeleteTopic:\r\n\r\n\tUnsubscribe \"topictest2\" \"AllTopics4\"\r\n\tDeleteTopic \"topictest2\"\r\n\r\n**Caching**\r\n\r\nAdding items to cache can be done with code such as the following (note: you'll need to get everything setup and add the web or app.config settings as described at https://www.windowsazure.com/en-us/develop/net/how-to-guides/cache/ ):\r\n\r\n\t[<DataContract>]\r\n\ttype TestRecord = \r\n\t\t{ [<DataMember>] mutable Id : Guid\r\n\t\t  [<DataMember>] mutable Name : string }\r\n\r\n\tlet testRecord = { Id = Guid.NewGuid(); Name = \"Dan\" }\r\n\r\n\tlet key = testRecord.Id.ToString()  \r\n\tPut key testRecord |> ignore\r\n\r\nYou can also specify a timeout value for the cache outside of the default 48 hours with code like this:\r\n   \r\n\tPutWithCustomTimeout key testRecord 10 |> ignore\r\n   \r\nGettig the value from cache is done like this:\r\n\r\n\tlet result = Get<TestRecord> key\r\n\r\n"}